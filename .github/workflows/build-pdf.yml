      - name: Create or get release (by tag)
        id: release_info
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          TAG: pdf-latest
          NAME: "PDF build - pdf-latest"
          BODY: "Automatically built PDF from LaTeX (compiled by GitHub Actions)."
        run: |
          set -euo pipefail
          API="https://api.github.com"
          auth_header="Authorization: token ${GITHUB_TOKEN}"
          # try to get release by tag
          echo "Checking for existing release with tag ${TAG}..."
          resp=$(curl -s -H "${auth_header}" -H "Accept: application/vnd.github+json" \
            "${API}/repos/${REPO}/releases/tags/${TAG}" || true)
          # if it contains 'Not Found' then create it
          if echo "$resp" | jq -e '.id' >/dev/null 2>&1; then
            release_id=$(echo "$resp" | jq -r '.id')
            upload_url=$(echo "$resp" | jq -r '.upload_url')
            echo "Found existing release id=${release_id}"
          else
            echo "Release not found; creating release tag ${TAG}..."
            create_payload=$(jq -n --arg t "$TAG" --arg n "$NAME" --arg b "$BODY" \
              '{ tag_name: $t, name: $n, body: $b, draft: false, prerelease: false }')
            created=$(curl -s -X POST -H "${auth_header}" -H "Accept: application/vnd.github+json" \
              -d "$create_payload" "${API}/repos/${REPO}/releases")
            release_id=$(echo "$created" | jq -r '.id')
            upload_url=$(echo "$created" | jq -r '.upload_url')
            if [ "$release_id" = "null" ] || [ -z "$release_id" ]; then
              echo "Failed to create release. Response:"
              echo "$created"
              exit 1
            fi
            echo "Created release id=${release_id}"
          fi

          # export outputs for later steps (use GITHUB_OUTPUT)
          echo "upload_url=${upload_url}" >> "$GITHUB_OUTPUT"
          echo "release_id=${release_id}" >> "$GITHUB_OUTPUT"

      - name: Upload dated asset (deepak-cv-YYYY-MM-DD.pdf)
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          UPLOAD_URL: ${{ steps.release_info.outputs.upload_url }}
        run: |
          set -euo pipefail
          DATED_NAME="${{ steps.names.outputs.DATED_NAME }}"
          base_upload_url="${UPLOAD_URL%\{*}"
          echo "Uploading ${DATED_NAME}..."
          # use curl to upload binary; spaces in filename handled by urlencode name param
          # compute encoded name (simple: use jq -sRr @uri for safe encoding)
          encoded_name=$(printf '%s' "$DATED_NAME" | jq -sRr @uri)
          curl -s -X POST \
            -H "Authorization: token ${GITHUB_TOKEN}" \
            -H "Content-Type: application/pdf" \
            --data-binary @"${DATED_NAME}" \
            "${base_upload_url}?name=${encoded_name}"

      - name: Delete existing stable asset (if exists)
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          RELEASE_ID: ${{ steps.release_info.outputs.release_id }}
          STABLE_NAME: ${{ steps.names.outputs.STABLE_NAME }}
        run: |
          set -euo pipefail
          API="https://api.github.com"
          auth_header="Authorization: token ${GITHUB_TOKEN}"
          echo "Checking for existing asset named '${STABLE_NAME}' on release id ${RELEASE_ID}..."
          assets=$(curl -s -H "${auth_header}" -H "Accept: application/vnd.github+json" \
                    "${API}/repos/${REPO}/releases/${RELEASE_ID}/assets")
          asset_id=$(echo "$assets" | jq -r --arg name "$STABLE_NAME" '.[] | select(.name==$name) | .id' || true)
          if [ -n "$asset_id" ] && [ "$asset_id" != "null" ]; then
            echo "Found existing asset id $asset_id -> deleting..."
            curl -s -X DELETE -H "${auth_header}" -H "Accept: application/vnd.github+json" \
              "${API}/repos/${REPO}/releases/assets/${asset_id}" \
              -o /dev/null -w "HTTP %{http_code}\n"
            echo "Deleted asset id $asset_id"
          else
            echo "No existing stable asset to delete."
          fi

      - name: Upload stable asset (deepak-cv.pdf) â€” stable download link
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          UPLOAD_URL: ${{ steps.release_info.outputs.upload_url }}
        run: |
          set -euo pipefail
          STABLE_NAME="${{ steps.names.outputs.STABLE_NAME }}"
          base_upload_url="${UPLOAD_URL%\{*}"
          encoded_name=$(printf '%s' "$STABLE_NAME" | jq -sRr @uri)
          echo "Uploading ${STABLE_NAME} as the stable asset..."
          curl -s -X POST \
            -H "Authorization: token ${GITHUB_TOKEN}" \
            -H "Content-Type: application/pdf" \
            --data-binary @"${STABLE_NAME}" \
            "${base_upload_url}?name=${encoded_name}"
