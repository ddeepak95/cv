name: Build LaTeX and publish PDF release (dated + stable link)

on:
  push:
    branches:
      - main
    paths:
      - '**.tex'
      - '**.bib'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    env:
      GITHUB_API_BASE: https://api.github.com

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Compile LaTeX to PDF
        uses: xu-cheng/latex-action@v2
        with:
          root_file: main.tex

      - name: Prepare filenames (dated + stable)
        id: names
        run: |
          # UTC date; change format if you prefer local timezone
          DATE=$(date -u +'%Y-%m-%d')
          DATED_NAME="deepak-cv-${DATE}.pdf"
          STABLE_NAME="deepak-cv.pdf"

          # Ensure compiled PDF exists
          if [ ! -f main.pdf ]; then
            echo "ERROR: main.pdf not found"; ls -la
            exit 1
          fi

          # create both files (dated copy + stable name)
          cp -f main.pdf "${DATED_NAME}"
          cp -f main.pdf "${STABLE_NAME}"

          # expose values to later steps
          echo "DATE=${DATE}" >> $GITHUB_OUTPUT
          echo "DATED_NAME=${DATED_NAME}" >> $GITHUB_OUTPUT
          echo "STABLE_NAME=${STABLE_NAME}" >> $GITHUB_OUTPUT
          ls -la "${DATED_NAME}" "${STABLE_NAME}"

      - name: Create or update GitHub Release (pdf-latest)
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: pdf-latest
          release_name: PDF build - pdf-latest
          body: "Automatically built PDF from LaTeX (compiled by GitHub Actions)."
          draft: false
          prerelease: false

      - name: Delete existing stable asset (if exists)
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          RELEASE_ID: ${{ steps.create_release.outputs.id }}
          STABLE_NAME: ${{ steps.names.outputs.STABLE_NAME }}
        run: |
          # List release assets and delete any matching STABLE_NAME
          echo "Checking for existing asset named '${STABLE_NAME}' on release id ${RELEASE_ID}..."
          assets_url="${GITHUB_API_BASE}/repos/${REPO}/releases/${RELEASE_ID}/assets"
          assets_json=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" \
                              -H "Accept: application/vnd.github+json" \
                              "${assets_url}")
          # find asset id by name
          asset_id=$(echo "$assets_json" | jq -r --arg name "$STABLE_NAME" '.[] | select(.name==$name) | .id' || true)
          if [ -n "$asset_id" ] && [ "$asset_id" != "null" ]; then
            echo "Found existing asset id $asset_id -> deleting..."
            curl -s -X DELETE -H "Authorization: token ${GITHUB_TOKEN}" \
                 -H "Accept: application/vnd.github+json" \
                 "${GITHUB_API_BASE}/repos/${REPO}/releases/assets/${asset_id}" \
                 -o /dev/null -w "HTTP %{http_code}\n"
            echo "Deleted asset id $asset_id"
          else
            echo "No existing stable asset to delete."
          fi

      - name: Upload dated asset (deepak-cv-YYYY-MM-DD.pdf)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          UPLOAD_URL: ${{ steps.create_release.outputs.upload_url }}
          REPO: ${{ github.repository }}
        run: |
          DATED_NAME="${{ steps.names.outputs.DATED_NAME }}"
          # upload_url has a template like: https://uploads.github.com/...{?name,label}
          # strip the template part and append ?name=...
          base_upload_url="${UPLOAD_URL%\{*}"
          echo "Uploading ${DATED_NAME} to release..."
          curl -s -X POST \
            -H "Authorization: token ${GITHUB_TOKEN}" \
            -H "Content-Type: application/pdf" \
            --data-binary @"${DATED_NAME}" \
            "${base_upload_url}?name=$(basename "${DATED_NAME")""

      - name: Upload stable asset (deepak-cv.pdf) â€” stable download link
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          UPLOAD_URL: ${{ steps.create_release.outputs.upload_url }}
        run: |
          STABLE_NAME="${{ steps.names.outputs.STABLE_NAME }}"
          base_upload_url="${UPLOAD_URL%\{*}"
          echo "Uploading ${STABLE_NAME} to release (this will be the stable public asset)..."
          curl -s -X POST \
            -H "Authorization: token ${GITHUB_TOKEN}" \
            -H "Content-Type: application/pdf" \
            --data-binary @"${STABLE_NAME}" \
            "${base_upload_url}?name=$(basename "${STABLE_NAME")""

      - name: Output download URL
        run: |
          echo "Stable download URL:"
          echo "https://github.com/${{ github.repository }}/releases/latest/download/${{ steps.names.outputs.STABLE_NAME }}"
